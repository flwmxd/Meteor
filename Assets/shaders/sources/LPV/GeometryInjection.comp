#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#include "LPVCommon.glsl"


layout(r32ui ,binding = 0) uniform coherent uimage3D uGeometryVolumeR;
layout(r32ui ,binding = 1) uniform coherent uimage3D uGeometryVolumeG;
layout(r32ui ,binding = 2) uniform coherent uimage3D uGeometryVolumeB;

layout(binding = 3) uniform sampler2D uRSMWorldSampler;
layout(binding = 4) uniform sampler2D uRSMNormalSampler;
layout(binding = 5) uniform sampler2D uFluxSampler;
layout(binding = 6) uniform UniformBufferObject
{
	mat4 lightViewMat;
	vec3 minAABB;
	vec3 lightDir;
	float cellSize;
	float rsmArea;
}ubo;

ivec3 convertPointToGridIndex(vec3 vPos) {
	return ivec3((vPos - ubo.minAABB) / ubo.cellSize);
}

float calculateSurfelAreaLightOrtho(vec3 lightPos,float rmsSize) {
	return (4 * lightPos.z * lightPos.z)/(rmsSize * rmsSize);
}

float calculateBlockingPotencial(float surfelArea, vec3 dir, vec3 normal) {
	return clamp((surfelArea * clamp(dot(normal,dir),0.0,1.0))/(ubo.cellSize * ubo.cellSize),0.0,1.0);
}

void main()
{
 	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
	
	int rmsSize = textureSize(uRSMWorldSampler,0).x;

	vec3 posFromRSM = texelFetch(uRSMWorldSampler, pixel,0).rgb;
	vec3 normalFromRSM = texelFetch(uRSMNormalSampler, pixel,0).rgb;

	vec4 viewPos = ubo.lightViewMat * vec4(posFromRSM,1.0);
	float surfelArea = calculateSurfelAreaLightOrtho(viewPos.xyz, rmsSize);

	ivec3 volumeCellIndex = convertPointToGridIndex(posFromRSM);

	float blockingPotencial = calculateBlockingPotencial(surfelArea, -ubo.lightDir, normalFromRSM);

	vec4 SHCoeffGV = evalCosineLobeToDir(normalFromRSM) * blockingPotencial;

	vec4 rsmFlux = texelFetch(uFluxSampler, pixel,0);

	vec4 shR = SHCoeffGV * rsmFlux.r;
    vec4 shG = SHCoeffGV * rsmFlux.g;
    vec4 shB = SHCoeffGV * rsmFlux.b;

	imgStoreAdd(uGeometryVolumeR,volumeCellIndex,shR);
	imgStoreAdd(uGeometryVolumeG,volumeCellIndex,shG);
	imgStoreAdd(uGeometryVolumeB,volumeCellIndex,shB);
}