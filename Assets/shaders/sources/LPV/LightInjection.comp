#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#include "LPVCommon.glsl"

layout(r32ui ,binding = 0) uniform coherent uimage3D LPVGridR;
layout(r32ui ,binding = 1) uniform coherent uimage3D LPVGridG;
layout(r32ui ,binding = 2) uniform coherent uimage3D LPVGridB;

layout(binding = 3) uniform sampler2D uFluxSampler;
layout(binding = 4) uniform sampler2D uRSMWorldSampler;
layout(binding = 5) uniform UniformBufferObject
{
	vec3 minAABB;
	float cellSize;
	float gridSize;
}ubo;

ivec3 convertPointToGridIndex(vec3 vPos) {
	return ivec3((vPos - ubo.minAABB) / ubo.cellSize);
}

void main()
{
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

	vec3 rsmWorldPos = texelFetch(uRSMWorldSampler, pixel, 0).xyz;
	ivec3 volumeCellIndex = convertPointToGridIndex(rsmWorldPos);
	vec3 cellCenter = (volumeCellIndex - 0.5) *  ubo.cellSize + ubo.minAABB;
	vec3 vplToCell = normalize(rsmWorldPos - cellCenter);//dir

	float rsmSize = float(textureSize(uFluxSampler,0));
	float surfelWeight = float(ubo.gridSize) / float(rsmSize);
	vec4 SHCoeffs = (evalCosineLobeToDir(vplToCell) / PI) * surfelWeight;

	vec4 rsmFlux = texelFetch(uFluxSampler, pixel,0);
	vec4 SHCoeffsR = SHCoeffs * rsmFlux.r;
	vec4 SHCoeffsG = SHCoeffs * rsmFlux.g;
	vec4 SHCoeffsB = SHCoeffs * rsmFlux.b;

	imgStoreAdd(LPVGridR,volumeCellIndex,SHCoeffsR);
	imgStoreAdd(LPVGridG,volumeCellIndex,SHCoeffsG);
	imgStoreAdd(LPVGridB,volumeCellIndex,SHCoeffsB);

} 