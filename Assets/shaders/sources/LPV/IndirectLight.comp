#version 450

#include "LPVCommon.glsl"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) uniform usampler3D uRAccumulatorLPV;
layout(binding = 1) uniform usampler3D uGAccumulatorLPV;
layout(binding = 2) uniform usampler3D uBAccumulatorLPV;
layout(binding = 3) uniform sampler2D uWorldNormalSampler;
layout(binding = 4) uniform sampler2D uWorldPositionSampler;
layout(rgba32f,binding = 5) uniform image2D uIndirectLight;
layout(binding = 6) uniform UniformBufferObject
{
	vec3 minAABB;
	float cellSize;
}ubo;

ivec3 convertPointToGridIndex(vec3 vPos) {
	return ivec3((vPos - ubo.minAABB) / ubo.cellSize);
}

void main()
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

	vec3 worldNormal = texelFetch(uWorldNormalSampler,pixel,0).xyz;
	vec3 worldPosition = texelFetch(uWorldPositionSampler, pixel,0).xyz;

	vec4 shIntensity = dirToSH(normalize(worldNormal));
	ivec3 cellIndex = convertPointToGridIndex(worldPosition);

	vec3 lpvIntensity  = vec3(0);
	vec3 lpvCellBasePos = vec3(cellIndex) * ubo.cellSize +  ubo.minAABB;

	vec3 alpha = clamp((worldPosition - lpvCellBasePos) /  ubo.cellSize, vec3(0), vec3(1));

	for (int i = 0; i < 8; ++i) {
		ivec3 offset = ivec3(i, i >> 1, i >> 2) & ivec3(1);
		ivec3 cellIndex = cellIndex + offset;
		vec3 trilinear = mix (1 - alpha, alpha, offset);
		float weight = trilinear.x * trilinear.y * trilinear.z;
		weight = max(0.0002, weight);
		lpvIntensity += weight * vec3( 
				dot(shIntensity, texelFetch2(uRAccumulatorLPV, cellIndex)),
				dot(shIntensity, texelFetch2(uGAccumulatorLPV, cellIndex)),
				dot(shIntensity, texelFetch2(uBAccumulatorLPV, cellIndex))
		);
	}
    imageStore(uIndirectLight,pixel,vec4(max(lpvIntensity, 0 ),1));
}