#version 450

#include "LPVCommon.glsl"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(r32ui ,binding = 0) uniform coherent uimage3D RAccumulatorLPV_;
layout(r32ui ,binding = 1) uniform coherent uimage3D GAccumulatorLPV_;
layout(r32ui ,binding = 2) uniform coherent uimage3D BAccumulatorLPV_;
layout(r32ui ,binding = 3) uniform coherent uimage3D LPVGridR_;//save current result
layout(r32ui ,binding = 4) uniform coherent uimage3D LPVGridG_;//save current result
layout(r32ui ,binding = 5) uniform coherent uimage3D LPVGridB_;//save current result

layout( binding = 6) uniform usampler3D LPVGridR;//pre-result
layout( binding = 7) uniform usampler3D LPVGridG;
layout( binding = 8) uniform usampler3D LPVGridB;

layout( binding = 9 ) uniform usampler3D uGeometryVolumeR;
layout( binding = 10) uniform usampler3D uGeometryVolumeG;
layout( binding = 11) uniform usampler3D uGeometryVolumeB;

layout( binding = 12) uniform UniformObject
{
	vec3 gridDim;
	float occlusionAmplifier;
	int step;
}ubo; 


const float directFaceSubtendedSolidAngle =  0.4006696846f / PI; 
const float sideFaceSubtendedSolidAngle = 0.4234413544f / PI;  

const ivec3 propDirections[6] = {
	//+Z
	ivec3(0,0,1),
	//-Z
	ivec3(0,0,-1),
	//+X
	ivec3(1,0,0),
	//-X
	ivec3(-1,0,0),
	//+Y
	ivec3(0,1,0),
	//-Y
	ivec3(0,-1,0)
};
const ivec2 cellSides[4] = {ivec2(1.0, 0.0), ivec2(0.0, 1.0), ivec2(-1.0, 0.0), ivec2(0.0, -1.0)};

vec3 getEvalSideDirection(int index, ivec3 orientation) {
	const float smallComponent = 0.4472135; // 1 / sqrt(5)
	const float bigComponent = 0.894427; // 2 / sqrt(5)
	const ivec2 side = cellSides[ index ];
	vec3 tmp = vec3(side.x * smallComponent, side.y * smallComponent, bigComponent);
	return vec3(orientation.x * tmp.x, orientation.y * tmp.y, orientation.z * tmp.z);
}

vec3 getReprojSideDirection(int index, ivec3 orientation) {
	const ivec2 side = cellSides[ index ];
	return vec3(orientation.x*side.x, orientation.y*side.y, 0);
}


void main()
{
	ivec3 volumeCellIndex = ivec3(gl_GlobalInvocationID.xyz);

	vec4 cR = vec4(0.0);
	vec4 cG = vec4(0.0);
	vec4 cB = vec4(0.0);
	for(int neighbour = 0; neighbour < 6; neighbour++) {
		vec4 RSHcoeffsNeighbour = vec4(0.0);
		vec4 GSHcoeffsNeighbour = vec4(0.0);
		vec4 BSHcoeffsNeighbour = vec4(0.0);
		ivec3 mainDirection = propDirections[neighbour]; 
		ivec3 neighbourCellIndex = volumeCellIndex - mainDirection;
	
		RSHcoeffsNeighbour = texelFetch2(LPVGridR, neighbourCellIndex);
		GSHcoeffsNeighbour = texelFetch2(LPVGridG, neighbourCellIndex);
		BSHcoeffsNeighbour = texelFetch2(LPVGridB, neighbourCellIndex);


		float redOcclusionValue = 1.0;
        float greenOcclusionValue = 1.0;
        float blueOcclusionValue = 1.0;
 	    
		 // No occlusion in the first step
		if(ubo.step > 1)
		{
			/*vec3 halfDir =  0.5 * mainDirection;
		    ivec3 occCoord = ivec3(volumeCellIndex - halfDir);*/

			vec4 redOccCoeffs1 = texelFetch2(uGeometryVolumeR, volumeCellIndex);
            vec4 greenOccCoeffs1 = texelFetch2(uGeometryVolumeG, volumeCellIndex);
            vec4 blueOccCoeffs1 = texelFetch2(uGeometryVolumeB, volumeCellIndex);

			vec4 redOccCoeffs2 = texelFetch2(uGeometryVolumeR, neighbourCellIndex);
            vec4 greenOccCoeffs2 = texelFetch2(uGeometryVolumeG, neighbourCellIndex);
            vec4 blueOccCoeffs2 = texelFetch2(uGeometryVolumeB, neighbourCellIndex);

			vec4 redOccCoeffs = (redOccCoeffs1 + redOccCoeffs2) / 2.0;
			vec4 greenOccCoeffs = (greenOccCoeffs1 + greenOccCoeffs2) / 2.0;
			vec4 blueOccCoeffs  = (blueOccCoeffs1 + blueOccCoeffs2) / 2.0;

			vec4 sh = dirToSH(-mainDirection);

            redOcclusionValue = 1.0 - clamp(ubo.occlusionAmplifier * dot(redOccCoeffs, sh), 0.0, 1.0);
            greenOcclusionValue = 1.0 - clamp(ubo.occlusionAmplifier * dot(greenOccCoeffs, sh), 0.0, 1.0);
            blueOcclusionValue = 1.0 - clamp(ubo.occlusionAmplifier * dot(blueOccCoeffs,sh), 0.0, 1.0);
		}

		float rOccludedDirectFaceContribution = redOcclusionValue * directFaceSubtendedSolidAngle;
		float gOccludedDirectFaceContribution = greenOcclusionValue * directFaceSubtendedSolidAngle;
		float bOccludedDirectFaceContribution = blueOcclusionValue * directFaceSubtendedSolidAngle;
	
		vec4 mainDirectionCosineLobeSH = evalCosineLobeToDir(mainDirection);
		vec4 mainDirectionSH = dirToSH(mainDirection);

		cR += rOccludedDirectFaceContribution * max(0.0, dot(RSHcoeffsNeighbour, mainDirectionSH)) * mainDirectionCosineLobeSH;
		cG += gOccludedDirectFaceContribution * max(0.0, dot(GSHcoeffsNeighbour, mainDirectionSH)) * mainDirectionCosineLobeSH;
		cB += bOccludedDirectFaceContribution * max(0.0, dot(BSHcoeffsNeighbour, mainDirectionSH)) * mainDirectionCosineLobeSH;
	
		for(int face = 0; face < 4; face++) {
			vec3 evalDirection = getEvalSideDirection(face, mainDirection);
			vec3 reprojDirection = getReprojSideDirection(face, mainDirection);

			 // No occlusion in the first step
			if(ubo.step > 1)
			{
				vec4 redOccCoeffs1 = texelFetch2(uGeometryVolumeR, volumeCellIndex);
				vec4 greenOccCoeffs1 = texelFetch2(uGeometryVolumeG, volumeCellIndex);
				vec4 blueOccCoeffs1 = texelFetch2(uGeometryVolumeB, volumeCellIndex);

				vec4 redOccCoeffs2 = texelFetch2(uGeometryVolumeR, neighbourCellIndex);
				vec4 greenOccCoeffs2 = texelFetch2(uGeometryVolumeG, neighbourCellIndex);
				vec4 blueOccCoeffs2 = texelFetch2(uGeometryVolumeB, neighbourCellIndex);

				vec4 redOccCoeffs = (redOccCoeffs1 + redOccCoeffs2) / 2.0;
				vec4 greenOccCoeffs = (greenOccCoeffs1 + greenOccCoeffs2) / 2.0;
				vec4 blueOccCoeffs  = (blueOccCoeffs1 + blueOccCoeffs2) / 2.0;

				vec4 sh = dirToSH(-mainDirection);

				redOcclusionValue = 1.0 - clamp(ubo.occlusionAmplifier * dot(redOccCoeffs, sh), 0.0, 1.0);
				greenOcclusionValue = 1.0 - clamp(ubo.occlusionAmplifier * dot(greenOccCoeffs, sh), 0.0, 1.0);
				blueOcclusionValue = 1.0 - clamp(ubo.occlusionAmplifier * dot(blueOccCoeffs,sh), 0.0, 1.0);
			}

			rOccludedDirectFaceContribution = redOcclusionValue * sideFaceSubtendedSolidAngle;
			gOccludedDirectFaceContribution = greenOcclusionValue * sideFaceSubtendedSolidAngle;
			bOccludedDirectFaceContribution = blueOcclusionValue * sideFaceSubtendedSolidAngle;

			vec4 reprojDirectionCosineLobeSH = evalCosineLobeToDir(evalDirection);
			vec4 evalDirectionSH = dirToSH(reprojDirection);
			
			cR += rOccludedDirectFaceContribution * max(0.0, dot(RSHcoeffsNeighbour, evalDirectionSH)) * reprojDirectionCosineLobeSH;
			cG += gOccludedDirectFaceContribution * max(0.0, dot(GSHcoeffsNeighbour, evalDirectionSH)) * reprojDirectionCosineLobeSH;
			cB += bOccludedDirectFaceContribution * max(0.0, dot(BSHcoeffsNeighbour, evalDirectionSH)) * reprojDirectionCosineLobeSH;
		}
	}

	imgStoreAdd(LPVGridR_,volumeCellIndex,cR);
	imgStoreAdd(LPVGridG_,volumeCellIndex,cG);
	imgStoreAdd(LPVGridB_,volumeCellIndex,cB);

	vec4 R = imgLoad(LPVGridR_, volumeCellIndex);
	vec4 G = imgLoad(LPVGridG_, volumeCellIndex);
	vec4 B = imgLoad(LPVGridB_, volumeCellIndex);

	imgStoreAdd(RAccumulatorLPV_, volumeCellIndex, R);
	imgStoreAdd(GAccumulatorLPV_, volumeCellIndex, G);
	imgStoreAdd(BAccumulatorLPV_, volumeCellIndex, B);
}