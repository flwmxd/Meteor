#version 450
#extension GL_ARB_shader_image_load_store : require

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "VXGI.glsl"

layout(binding = 0, rgba8) uniform image3D uVoxelBase;
layout(binding = 1, rgba8) uniform writeonly image3D uVoxelMipmap[6];
//1 2 3 4 5 6
layout(binding = 7) 	   uniform UniformBufferObject
{
	int mipDimension;
	int padding;
	int padding1;
	int padding2;
}ubo;

void fetchTexels(ivec3 pos, inout vec4 val[8]) 
{
	for(int i = 0; i < 8; i++)
	{
		val[i] = imageLoad(uVoxelBase, pos + anisoOffsets[i]);
	}
}

void main()
{
	if( gl_GlobalInvocationID.x >= ubo.mipDimension ||
		gl_GlobalInvocationID.y >= ubo.mipDimension ||
		gl_GlobalInvocationID.z >= ubo.mipDimension ) return;

	ivec3 writePos = ivec3(gl_GlobalInvocationID);
	ivec3 sourcePos = writePos * 2;
	vec4 values[8];

	fetchTexels(sourcePos, values);
	// x -
	imageStore(uVoxelMipmap[0], writePos, 
	(
		values[0] + values[4] * (1 - values[0].a) + 
		values[1] + values[5] * (1 - values[1].a) +
		values[2] + values[6] * (1 - values[2].a) +
		values[3] + values[7] * (1 - values[3].a)) * 0.25f
	);
	// x +
    imageStore(uVoxelMipmap[1], writePos, 
	(
		values[4] + values[0] * (1 - values[4].a) +
    	values[5] + values[1] * (1 - values[5].a) +
    	values[6] + values[2] * (1 - values[6].a) +
    	values[7] + values[3] * (1 - values[7].a)) * 0.25f
    );
	// y -
    imageStore(uVoxelMipmap[2], writePos, 
	(
		values[0] + values[2] * (1 - values[0].a) +
    	values[1] + values[3] * (1 - values[1].a) +
    	values[5] + values[7] * (1 - values[5].a) +
    	values[4] + values[6] * (1 - values[4].a)) * 0.25f
    );
	// y +
    imageStore(uVoxelMipmap[3], writePos, 
	(
		values[2] + values[0] * (1 - values[2].a) +
    	values[3] + values[1] * (1 - values[3].a) +
    	values[7] + values[5] * (1 - values[7].a) +
    	values[6] + values[4] * (1 - values[6].a)) * 0.25f
    );
	// z -
    imageStore(uVoxelMipmap[4], writePos, 
	(
		values[0] + values[1] * (1 - values[0].a) +
    	values[2] + values[3] * (1 - values[2].a) +
    	values[4] + values[5] * (1 - values[4].a) +
    	values[6] + values[7] * (1 - values[6].a)) * 0.25f
    );
	// z +
    imageStore(uVoxelMipmap[5], writePos, 
	(
		values[1] + values[0] * (1 - values[1].a) +
    	values[3] + values[2] * (1 - values[3].a) +
    	values[5] + values[4] * (1 - values[5].a) +
    	values[7] + values[6] * (1 - values[7].a)) * 0.25f
    );
}